<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32L476G-Discovery\STM32L476G-Discovery.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32L476G-Discovery\STM32L476G-Discovery.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Aug 19 14:22:22 2020
<BR><P>
<H3>Maximum Stack Usage =       1440 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
cmd_cr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
 <LI><a href="#[e2]">_Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e2]">_Error_Handler</a><BR>
 <LI><a href="#[89]">uartprocess_task</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[89]">uartprocess_task</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32l4xx_it.o(i.BusFault_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX0_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[20]">CAN1_RX1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[21]">CAN1_SCE_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1e]">CAN1_TX_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3c]">COMP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4a]">CRS_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[16]">DMA1_Channel1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[17]">DMA1_Channel2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[18]">DMA1_Channel3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[19]">DMA1_Channel4_IRQHandler</a> from stm32l4xx_it.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel5_IRQHandler</a> from stm32l4xx_it.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel6_IRQHandler</a> from stm32l4xx_it.o(i.DMA1_Channel6_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel7_IRQHandler</a> from stm32l4xx_it.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[37]">DMA2_Channel1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[38]">DMA2_Channel2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[39]">DMA2_Channel3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3a]">DMA2_Channel4_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3b]">DMA2_Channel5_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel6_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[40]">DMA2_Channel7_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32l4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[31]">EXTI15_10_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from stm32l4xx_it.o(i.EXTI4_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[49]">FPU_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32l4xx_it.o(i.HardFault_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[29]">I2C1_ER_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[28]">I2C1_EV_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2b]">I2C2_ER_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2a]">I2C2_EV_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[44]">I2C3_ER_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[43]">I2C3_EV_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3d]">LPTIM1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[3e]">LPTIM2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[41]">LPUART1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32l4xx_it.o(i.MemManage_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32l4xx_it.o(i.NMI_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[c]">PVD_PVM_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[42]">QUADSPI_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[48]">RNG_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[32]">RTC_Alarm_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[e]">RTC_WKUP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[45]">SAI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[33]">SDMMC1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2c]">SPI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2d]">SPI2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[34]">SPI3_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[46]">SWPMI1_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32l4xx_it.o(i.SysTick_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4c]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from startup_stm32l431xx.o(.text)
 <LI><a href="#[d]">TAMP_STAMP_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[25]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[24]">TIM1_UP_TIM16_IRQHandler</a> from stm32l4xx_it.o(i.TIM1_UP_TIM16_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[35]">TIM6_DAC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[36]">TIM7_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[47]">TSC_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[52]">UART_DMAAbortOnError</a> from stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[55]">UART_DMAError</a> from stm32l4xx_hal_uart.o(i.UART_DMAError) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[55]">UART_DMAError</a> from stm32l4xx_hal_uart.o(i.UART_DMAError) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[53]">UART_DMAReceiveCplt</a> from stm32l4xx_hal_uart.o(i.UART_DMAReceiveCplt) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[54]">UART_DMARxHalfCplt</a> from stm32l4xx_hal_uart.o(i.UART_DMARxHalfCplt) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[56]">UART_DMATransmitCplt</a> from stm32l4xx_hal_uart.o(i.UART_DMATransmitCplt) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[57]">UART_DMATxHalfCplt</a> from stm32l4xx_hal_uart.o(i.UART_DMATxHalfCplt) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[2e]">USART1_IRQHandler</a> from stm32l4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[2f]">USART2_IRQHandler</a> from stm32l4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[30]">USART3_IRQHandler</a> from stm32l4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[5a]">UartRecv_1</a> from uart.o(i.UartRecv_1) referenced from uart.o(i.UartOpen)
 <LI><a href="#[5b]">UartRecv_2</a> from uart.o(i.UartRecv_2) referenced from uart.o(i.UartOpen)
 <LI><a href="#[58]">UartSend_1</a> from uart.o(i.UartSend_1) referenced from uart.o(i.UartOpen)
 <LI><a href="#[59]">UartSend_2</a> from uart.o(i.UartSend_2) referenced from uart.o(i.UartOpen)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32l4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32l431xx.o(.text) referenced from startup_stm32l431xx.o(RESET)
 <LI><a href="#[4d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l431xx.o(.text)
 <LI><a href="#[4f]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[50]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[4e]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from __0sscanf.o(.text)
 <LI><a href="#[5c]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[68]">cmd_asl</a> from command.o(i.cmd_asl) referenced from command.o(.constdata)
 <LI><a href="#[72]">cmd_at</a> from command.o(i.cmd_at) referenced from command.o(.constdata)
 <LI><a href="#[60]">cmd_autocheck</a> from command.o(i.cmd_autocheck) referenced from command.o(.constdata)
 <LI><a href="#[85]">cmd_cfc</a> from command.o(i.cmd_cfc) referenced from command.o(.constdata)
 <LI><a href="#[77]">cmd_cr</a> from command.o(i.cmd_cr) referenced from command.o(.constdata)
 <LI><a href="#[69]">cmd_date</a> from command.o(i.cmd_date) referenced from command.o(.constdata)
 <LI><a href="#[6b]">cmd_datetime</a> from command.o(i.cmd_datetime) referenced from command.o(.constdata)
 <LI><a href="#[7e]">cmd_debugoff</a> from command.o(i.cmd_debugoff) referenced from command.o(.constdata)
 <LI><a href="#[7d]">cmd_debugon</a> from command.o(i.cmd_debugon) referenced from command.o(.constdata)
 <LI><a href="#[64]">cmd_di</a> from command.o(i.cmd_di) referenced from command.o(.constdata)
 <LI><a href="#[79]">cmd_down</a> from command.o(i.cmd_down) referenced from command.o(.constdata)
 <LI><a href="#[84]">cmd_erase_check</a> from command.o(i.cmd_erase_check) referenced from command.o(.constdata)
 <LI><a href="#[6e]">cmd_fat</a> from command.o(i.cmd_fat) referenced from command.o(.constdata)
 <LI><a href="#[6c]">cmd_ftd</a> from command.o(i.cmd_ftd) referenced from command.o(.constdata)
 <LI><a href="#[61]">cmd_help</a> from command.o(i.cmd_help) referenced from command.o(.constdata)
 <LI><a href="#[65]">cmd_id</a> from command.o(i.cmd_id) referenced from command.o(.constdata)
 <LI><a href="#[66]">cmd_lat</a> from command.o(i.cmd_lat) referenced from command.o(.constdata)
 <LI><a href="#[67]">cmd_long</a> from command.o(i.cmd_long) referenced from command.o(.constdata)
 <LI><a href="#[76]">cmd_qcpm</a> from command.o(i.cmd_qcpm) referenced from command.o(.constdata)
 <LI><a href="#[75]">cmd_qcps</a> from command.o(i.cmd_qcps) referenced from command.o(.constdata)
 <LI><a href="#[62]">cmd_qz</a> from command.o(i.cmd_qz) referenced from command.o(.constdata)
 <LI><a href="#[78]">cmd_readdata</a> from command.o(i.cmd_readdata) referenced from command.o(.constdata)
 <LI><a href="#[7a]">cmd_reset</a> from command.o(i.cmd_reset) referenced from command.o(.constdata)
 <LI><a href="#[80]">cmd_restore</a> from command.o(i.cmd_restore) referenced from command.o(.constdata)
 <LI><a href="#[83]">cmd_secdout_off</a> from command.o(i.cmd_secdout_off) referenced from command.o(.constdata)
 <LI><a href="#[82]">cmd_secdout_on</a> from command.o(i.cmd_secdout_on) referenced from command.o(.constdata)
 <LI><a href="#[5f]">cmd_setcom</a> from command.o(i.cmd_setcom) referenced from command.o(.constdata)
 <LI><a href="#[6f]">cmd_setcomway</a> from command.o(i.cmd_setcomway) referenced from command.o(.constdata)
 <LI><a href="#[88]">cmd_shsensor</a> from command.o(i.cmd_shsensor) referenced from command.o(.constdata)
 <LI><a href="#[74]">cmd_sn</a> from command.o(i.cmd_sn) referenced from command.o(.constdata)
 <LI><a href="#[70]">cmd_ss</a> from command.o(i.cmd_ss) referenced from command.o(.constdata)
 <LI><a href="#[63]">cmd_st</a> from command.o(i.cmd_st) referenced from command.o(.constdata)
 <LI><a href="#[81]">cmd_starttime</a> from command.o(i.cmd_starttime) referenced from command.o(.constdata)
 <LI><a href="#[71]">cmd_stat</a> from command.o(i.cmd_stat) referenced from command.o(.constdata)
 <LI><a href="#[6d]">cmd_stdev</a> from command.o(i.cmd_stdev) referenced from command.o(.constdata)
 <LI><a href="#[87]">cmd_stsensor</a> from command.o(i.cmd_stsensor) referenced from command.o(.constdata)
 <LI><a href="#[7b]">cmd_superadmin</a> from command.o(i.cmd_superadmin) referenced from command.o(.constdata)
 <LI><a href="#[6a]">cmd_time</a> from command.o(i.cmd_time) referenced from command.o(.constdata)
 <LI><a href="#[7c]">cmd_unit</a> from command.o(i.cmd_unit) referenced from command.o(.constdata)
 <LI><a href="#[7f]">cmd_version</a> from command.o(i.cmd_version) referenced from command.o(.constdata)
 <LI><a href="#[73]">cmd_vv</a> from command.o(i.cmd_vv) referenced from command.o(.constdata)
 <LI><a href="#[86]">cmd_windh</a> from command.o(i.cmd_windh) referenced from command.o(.constdata)
 <LI><a href="#[51]">isspace</a> from isspace_o.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[4b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[5e]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[5d]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[8b]">readdata_task</a> from sensor_process.o(i.readdata_task) referenced from main.o(.constdata)
 <LI><a href="#[8a]">time_task</a> from sensor_process.o(i.time_task) referenced from main.o(.constdata)
 <LI><a href="#[89]">uartprocess_task</a> from sensor_process.o(i.uartprocess_task) referenced from main.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(.text)
</UL>
<P><STRONG><a name="[1c9]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[8c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b9]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1ca]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1cb]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1cc]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1cd]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1ce]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1c2]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1c1]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1bc]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l431xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[92]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_format
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
</UL>

<P><STRONG><a name="[51]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[93]"></a>mktime</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_softimer_sec
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_softimer
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Time_to_min
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartcmd_process
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcpm
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_element
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMinData
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_cfg_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_task
</UL>

<P><STRONG><a name="[189]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setcom
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cf]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_element
</UL>

<P><STRONG><a name="[1d0]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend_2
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend_1
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_sys_cfg
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartcmd_process
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleData_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_history_mindata
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_history_mindata
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartdev_process
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkuart
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pam_init
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_ADC
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleData_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_check_data
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cfc_data
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rcv
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_cfg_init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;harddog_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1d2]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[d9]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_sys_cfg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stsensor
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_sn
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_shsensor
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setcom
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMinData
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pam_init
</UL>

<P><STRONG><a name="[151]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
</UL>

<P><STRONG><a name="[d8]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartcmd_process
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sensor
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_element
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSeparator
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_windh
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_version
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_time
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stsensor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_starttime
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_sn
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_shsensor
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setcom
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_secdout_on
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_secdout_off
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_restore
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcps
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcpm
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_long
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_lat
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_id
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_erase_check
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_down
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_di
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_debugon
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_debugoff
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_datetime
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_date
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cfc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_asl
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMinData
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_check_data
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cfc_data
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pack_Datal
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pack_Data
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startupprint
</UL>

<P><STRONG><a name="[182]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartcmd_process
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sensor
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_element
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_version
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stsensor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_starttime
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_secdout_on
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_secdout_off
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_restore
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_id
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_erase_check
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_di
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_debugon
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_debugoff
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cfc
</UL>

<P><STRONG><a name="[d6]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_windh
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMinData
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S32ToStrAlignRight
</UL>

<P><STRONG><a name="[179]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sensor
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_element
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stsensor
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stdev
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ss
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setcom
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcps
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcpm
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_id
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ftd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_di
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cfc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_at
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_asl
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sensor
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_format
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_element
</UL>

<P><STRONG><a name="[17f]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartcmd_process
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_windh
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_vv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_version
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_unit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_time
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_superadmin
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stsensor
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stdev
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stat
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_starttime
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_st
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ss
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_sn
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_shsensor
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setcomway
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setcom
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_secdout_on
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_secdout_off
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_restore
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_readdata
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qz
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcps
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcpm
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_long
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_lat
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_id
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_help
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ftd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_fat
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_erase_check
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_down
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_di
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_debugon
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_debugoff
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_datetime
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_date
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cfc
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_autocheck
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_at
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_asl
</UL>

<P><STRONG><a name="[98]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_time
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_long
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_lat
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_down
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_datetime
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_date
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cfc
</UL>

<P><STRONG><a name="[9a]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[b4]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[a0]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[a3]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartcmd_process
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_windh
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_vv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_version
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_unit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stsensor
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stdev
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_starttime
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_st
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_sn
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_shsensor
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setcomway
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setcom
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_secdout_on
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_secdout_off
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_restore
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_readdata
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcps
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcpm
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_id
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ftd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_fat
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_erase_check
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_down
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_debugon
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_debugoff
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cfc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_at
</UL>

<P><STRONG><a name="[a6]"></a>atol</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_windh
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setcom
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qz
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_asl
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_ReadTemperature
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Copy
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_ReadTemperature
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_modf
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Copy
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_ReadTemperature
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_vv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_at
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sensor
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BanWenBanYa_engine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempdata_init
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sensor
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BanWenBanYa_engine
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_vv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_at
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Copy
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempdata_init
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_ReadTemperature
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Copy
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_ReadTemperature
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_ReadTemperature
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sensor
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ss
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcps
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcpm
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cfc
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sensor
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cfc_data
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandardDeviation
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Copy
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BanWenBanYa_engine
</UL>

<P><STRONG><a name="[1d3]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sensor
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_element
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Copy
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sensor
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_element
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Copy
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_ReadTemperature
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sensor
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_element
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_vv
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcps
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcpm
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_at
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sensor
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandardDeviation
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Copy
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BanWenBanYa_engine
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempdata_init
</UL>

<P><STRONG><a name="[1d4]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1d5]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[1d6]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1d7]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Sec_to_Time
</UL>

<P><STRONG><a name="[94]"></a>_localtime</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[9b]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[99]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[4e]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> __0sscanf.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[a5]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1d8]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[1d9]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[a9]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[16d]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1da]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1db]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[b6]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[1dc]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>ADC_Disable</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32l4xx_hal_adc.o(i.ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[bc]"></a>ADC_Enable</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32l4xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[bd]"></a>BanWenBanYa_engine</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, sensor_basic.o(i.BanWenBanYa_engine))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = BanWenBanYa_engine &rArr; DS3231_ReadTemperature &rArr; I2C_ReadBuffer &rArr; I2CInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_ADC
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_ADC
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_ReadTemperature
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_test
</UL>

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>Check_ADC</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, adc12_a.o(i.Check_ADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Check_ADC &rArr; HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BanWenBanYa_engine
</UL>

<P><STRONG><a name="[c4]"></a>Convert_Sec_to_Time</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sensor_basic.o(i.Convert_Sec_to_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Convert_Sec_to_Time &rArr; localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_starttime
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMinData
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_event_autosend
</UL>

<P><STRONG><a name="[c5]"></a>Convert_Time_to_min</STRONG> (Thumb, 58 bytes, Stack size 56 bytes, sensor_basic.o(i.Convert_Time_to_min))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Convert_Time_to_min &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMinData
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_event_autosend
</UL>

<P><STRONG><a name="[19]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DMA1_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DMA1_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>DS3231_ReadCtrReg</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, ds3231.o(i.DS3231_ReadCtrReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = DS3231_ReadCtrReg &rArr; I2C_ReadBuffer &rArr; I2CInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDS3231_Init
</UL>

<P><STRONG><a name="[c9]"></a>DS3231_ReadStatusReg</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, ds3231.o(i.DS3231_ReadStatusReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = DS3231_ReadStatusReg &rArr; I2C_ReadBuffer &rArr; I2CInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDS3231_Init
</UL>

<P><STRONG><a name="[be]"></a>DS3231_ReadTemperature</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, ds3231.o(i.DS3231_ReadTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = DS3231_ReadTemperature &rArr; I2C_ReadBuffer &rArr; I2CInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BanWenBanYa_engine
</UL>

<P><STRONG><a name="[ca]"></a>DS3231_ReadTime</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, ds3231.o(i.DS3231_ReadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = DS3231_ReadTime &rArr; I2C_ReadBuffer &rArr; I2CInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd_trans_char
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_task
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[cc]"></a>Data_Copy</STRONG> (Thumb, 388 bytes, Stack size 64 bytes, sensor_basic.o(i.Data_Copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Data_Copy &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_modf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMinData
</UL>

<P><STRONG><a name="[d1]"></a>Datetime_up</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.Datetime_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Datetime_up &rArr; Rtc_UpdateTime
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_UpdateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>GetMinData</STRONG> (Thumb, 2638 bytes, Stack size 944 bytes, wind_sample.o(i.GetMinData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = GetMinData &rArr; Data_Copy &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Sec_to_Time
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandardDeviation
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S32ToStrAlignRight
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pack_Datal
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pack_Data
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Copy
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Time_to_min
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_history_mindata
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_history_mindata
</UL>

<P><STRONG><a name="[dd]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32l4xx_hal_adc_ex.o(i.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADCEx_Calibration_Start &rArr; ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_ADC
</UL>

<P><STRONG><a name="[137]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 792 bytes, Stack size 24 bytes, stm32l4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_ADC
</UL>

<P><STRONG><a name="[c3]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_ADC
</UL>

<P><STRONG><a name="[de]"></a>HAL_ADC_Init</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, stm32l4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC
</UL>

<P><STRONG><a name="[df]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 110 bytes, Stack size 128 bytes, adc12_a.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[c2]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, stm32l4xx_hal_adc.o(i.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_ADC
</UL>

<P><STRONG><a name="[e4]"></a>HAL_ADC_Start</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32l4xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_ADC
</UL>

<P><STRONG><a name="[146]"></a>HAL_DMA_Abort</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMA_Restart
</UL>

<P><STRONG><a name="[116]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[11e]"></a>HAL_DMA_Init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[e5]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[f2]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 258 bytes, Stack size 36 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>

<P><STRONG><a name="[e7]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wind_hal.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>HAL_GPIO_Init</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_MspInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;harddog_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[e8]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_task
</UL>

<P><STRONG><a name="[135]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_SET_CS_LOW
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_SET_CS_HIGH
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;harddog_feed
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;harddog_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[bb]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>

<P><STRONG><a name="[125]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CInit
</UL>

<P><STRONG><a name="[126]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c_ex.o(i.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CInit
</UL>

<P><STRONG><a name="[e9]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_I2C_DeInit &rArr; HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBuffer
</UL>

<P><STRONG><a name="[eb]"></a>HAL_I2C_Init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CInit
</UL>

<P><STRONG><a name="[ed]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 360 bytes, Stack size 64 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBuffer
</UL>

<P><STRONG><a name="[ea]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[ec]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[138]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f3]"></a>HAL_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[f6]"></a>HAL_MspInit</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, main.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[104]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[f4]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[13c]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[12f]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[e1]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 682 bytes, Stack size 40 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CInit
</UL>

<P><STRONG><a name="[fb]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[13d]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[144]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[145]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[fc]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 182 bytes, Stack size 12 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[fd]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1194 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ff]"></a>HAL_SPI_Init</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIInit
</UL>

<P><STRONG><a name="[100]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[13e]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[f7]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[10f]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[111]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12c]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer1
</UL>

<P><STRONG><a name="[101]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer1
</UL>

<P><STRONG><a name="[102]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[12d]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer1
</UL>

<P><STRONG><a name="[105]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer1
</UL>

<P><STRONG><a name="[10b]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[10a]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM16_IRQHandler
</UL>

<P><STRONG><a name="[10c]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wind_hal.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[110]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[117]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_UART_ErrorCallback &rArr; USART_DMA_Restart &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMA_Restart
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[114]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_UART_ErrorCallback &rArr; USART_DMA_Restart &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[119]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[11a]"></a>HAL_UART_MspInit</STRONG> (Thumb, 510 bytes, Stack size 152 bytes, uart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[11f]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartOpen
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMA_Restart
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[120]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[141]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[122]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend_2
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend_1
</UL>

<P><STRONG><a name="[118]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[142]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[123]"></a>HalDS3231_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ds3231.o(i.HalDS3231_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = HalDS3231_Init &rArr; DS3231_ReadStatusReg &rArr; I2C_ReadBuffer &rArr; I2CInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_ReadStatusReg
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_ReadCtrReg
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[124]"></a>I2CInit</STRONG> (Thumb, 184 bytes, Stack size 128 bytes, i2c.o(i.I2CInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = I2CInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDS3231_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadBuffer
</UL>

<P><STRONG><a name="[c8]"></a>I2C_ReadBuffer</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, i2c.o(i.I2C_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = I2C_ReadBuffer &rArr; I2CInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_ReadTime
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_ReadTemperature
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_ReadStatusReg
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_ReadCtrReg
</UL>

<P><STRONG><a name="[12a]"></a>Init_ADC</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, adc12_a.o(i.Init_ADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Init_ADC &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[12b]"></a>Init_Timer1</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, wind_hal.o(i.Init_Timer1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Init_Timer1 &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
</UL>

<P><STRONG><a name="[12e]"></a>Init_sys_cfg</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, wind_sensor.o(i.Init_sys_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Init_sys_cfg &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_restore
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_cfg_init
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>Pack_Data</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sensor_basic.o(i.Pack_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Pack_Data &rArr; S32ToStrAlignRight
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S32ToStrAlignRight
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMinData
</UL>

<P><STRONG><a name="[dc]"></a>Pack_Datal</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sensor_basic.o(i.Pack_Datal))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Pack_Datal &rArr; S32ToStrAlignRight
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S32ToStrAlignRight
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMinData
</UL>

<P><STRONG><a name="[d2]"></a>Rtc_UpdateTime</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, main.o(i.Rtc_UpdateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Rtc_UpdateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datetime_up
</UL>

<P><STRONG><a name="[d7]"></a>S32ToStrAlignRight</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, sensor_basic.o(i.S32ToStrAlignRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = S32ToStrAlignRight
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMinData
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pack_Datal
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pack_Data
</UL>

<P><STRONG><a name="[130]"></a>SPIInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, spi.o(i.SPIInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPIInit &rArr; SPIx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Init
</UL>

<P><STRONG><a name="[15e]"></a>SPI_Read_Write_Byte</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, spi.o(i.SPI_Read_Write_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Send_Buf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Recv_Buf
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Read_Reg
</UL>

<P><STRONG><a name="[132]"></a>SampleData_Init</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, wind_sample.o(i.SampleData_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SampleData_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sensor_init
</UL>

<P><STRONG><a name="[133]"></a>Self_test</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, sensor_process.o(i.Self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Self_test &rArr; BanWenBanYa_engine &rArr; DS3231_ReadTemperature &rArr; I2C_ReadBuffer &rArr; I2CInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BanWenBanYa_engine
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[134]"></a>Sensor_Init</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, wind_hal.o(i.Sensor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Sensor_Init &rArr; Init_Timer1 &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer1
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sensor_init
</UL>

<P><STRONG><a name="[db]"></a>StandardDeviation</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, sensor_basic.o(i.StandardDeviation))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = StandardDeviation &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMinData
</UL>

<P><STRONG><a name="[bf]"></a>Start_ADC</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, adc12_a.o(i.Start_ADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Start_ADC &rArr; HAL_ADCEx_Calibration_Start &rArr; ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BanWenBanYa_engine
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Handler &rArr; osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;harddog_feed
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datetime_up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[13b]"></a>SystemClock_Config</STRONG> (Thumb, 126 bytes, Stack size 96 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(.text)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.TIM1_UP_TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_UP_TIM16_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[106]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[11c]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[11d]"></a>UART_CheckIdleState</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[143]"></a>UART_Init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_CFG
</UL>

<P><STRONG><a name="[11b]"></a>UART_SetConfig</STRONG> (Thumb, 554 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[13f]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[2e]"></a>USART1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_ErrorCallback &rArr; USART_DMA_Restart &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMA_Restart
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART2_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_ErrorCallback &rArr; USART_DMA_Restart &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMA_Restart
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART3_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_ErrorCallback &rArr; USART_DMA_Restart &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[113]"></a>USART_DMA_Restart</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, uart.o(i.USART_DMA_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USART_DMA_Restart &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>UartOpen</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, uart.o(i.UartOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UartOpen &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[14b]"></a>UartRead</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, uart.o(i.UartRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UartRead &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rcv
</UL>

<P><STRONG><a name="[5a]"></a>UartRecv_1</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, uart.o(i.UartRecv_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UartRecv_1 &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i.UartOpen)
</UL>
<P><STRONG><a name="[5b]"></a>UartRecv_2</STRONG> (Thumb, 156 bytes, Stack size 0 bytes, uart.o(i.UartRecv_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UartRecv_2 &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i.UartOpen)
</UL>
<P><STRONG><a name="[58]"></a>UartSend_1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, uart.o(i.UartSend_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UartSend_1 &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i.UartOpen)
</UL>
<P><STRONG><a name="[59]"></a>UartSend_2</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, uart.o(i.UartSend_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UartSend_2 &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i.UartOpen)
</UL>
<P><STRONG><a name="[14e]"></a>UartWrite</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, uart.o(i.UartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UartWrite &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendStr
</UL>

<P><STRONG><a name="[14f]"></a>Uart_CFG</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, sysinit.o(i.Uart_CFG))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Uart_CFG &rArr; UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l431xx.o(RESET)
</UL>
<P><STRONG><a name="[150]"></a>Utils_CheckCmdStr</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, command.o(i.Utils_CheckCmdStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Utils_CheckCmdStr
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartcmd_process
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_windh
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_vv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_version
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_unit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_time
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_superadmin
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stsensor
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stdev
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stat
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_starttime
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_st
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ss
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_sn
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_shsensor
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setcomway
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setcom
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_secdout_on
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_secdout_off
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_restore
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_readdata
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qz
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcps
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcpm
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_long
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_lat
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_id
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_help
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ftd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_fat
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_erase_check
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_down
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_di
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_debugon
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_debugoff
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_datetime
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_date
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cfc
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_autocheck
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_at
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_asl
</UL>

<P><STRONG><a name="[152]"></a>W25Q128_Data_Prog</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, w25q128.o(i.W25Q128_Data_Prog))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = W25Q128_Data_Prog &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_WriteEnable
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Send_Buf
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_IS_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_cfg
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cr
</UL>

<P><STRONG><a name="[157]"></a>W25Q128_Data_Read</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, w25q128.o(i.W25Q128_Data_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = W25Q128_Data_Read &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Send_Buf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Recv_Buf
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_IS_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_record_min
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_check_data
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cfc_data
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_cfg_init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sys_cfg
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pam_init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cr
</UL>

<P><STRONG><a name="[159]"></a>W25Q128_Erase_Chip</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, w25q128.o(i.W25Q128_Erase_Chip))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25Q128_Erase_Chip &rArr; W25Q128_WriteEnable &rArr; W25Q128_Send_Buf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_WriteEnable
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Send_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_erase_check
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_datetime
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_cfg
</UL>

<P><STRONG><a name="[154]"></a>W25Q128_IS_Busy</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, w25q128.o(i.W25Q128_IS_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25Q128_IS_Busy &rArr; W25Q128_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Data_Read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Data_Prog
</UL>

<P><STRONG><a name="[15b]"></a>W25Q128_Init</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, w25q128.o(i.W25Q128_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = W25Q128_Init &rArr; SPIInit &rArr; SPIx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Reset
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[15a]"></a>W25Q128_Read_Reg</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, w25q128.o(i.W25Q128_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25Q128_Read_Reg
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_Write_Byte
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_SET_CS_LOW
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_SET_CS_HIGH
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_IS_Busy
</UL>

<P><STRONG><a name="[158]"></a>W25Q128_Recv_Buf</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, w25q128.o(i.W25Q128_Recv_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = W25Q128_Recv_Buf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_Write_Byte
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_SET_CS_HIGH
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Data_Read
</UL>

<P><STRONG><a name="[15c]"></a>W25Q128_Reset</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, w25q128.o(i.W25Q128_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = W25Q128_Reset &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Send_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Init
</UL>

<P><STRONG><a name="[15f]"></a>W25Q128_SET_CS_HIGH</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi.o(i.W25Q128_SET_CS_HIGH))
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Send_Buf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Recv_Buf
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Read_Reg
</UL>

<P><STRONG><a name="[15d]"></a>W25Q128_SET_CS_LOW</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spi.o(i.W25Q128_SET_CS_LOW))
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Send_Buf
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Read_Reg
</UL>

<P><STRONG><a name="[156]"></a>W25Q128_Send_Buf</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, w25q128.o(i.W25Q128_Send_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25Q128_Send_Buf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Read_Write_Byte
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_SET_CS_LOW
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_SET_CS_HIGH
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_WriteEnable
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Reset
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Erase_Chip
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Data_Read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Data_Prog
</UL>

<P><STRONG><a name="[155]"></a>W25Q128_WriteEnable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, w25q128.o(i.W25Q128_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W25Q128_WriteEnable &rArr; W25Q128_Send_Buf
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Send_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Erase_Chip
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Data_Prog
</UL>

<P><STRONG><a name="[e2]"></a>_Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_ADC
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer1
</UL>

<P><STRONG><a name="[160]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1de]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[180]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartcmd_process
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_windh
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_vv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_version
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_unit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_time
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_superadmin
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stsensor
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stdev
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stat
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_starttime
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_st
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ss
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_sn
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_shsensor
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setcomway
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setcom
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_secdout_on
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_secdout_off
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_restore
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_readdata
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qz
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcps
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcpm
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_long
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_lat
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_id
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_help
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ftd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_fat
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_erase_check
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_down
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_di
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_debugon
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_debugoff
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_datetime
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_date
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cfc
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_autocheck
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_at
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_asl
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_check_data
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cfc_data
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startupprint
</UL>

<P><STRONG><a name="[1df]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1e0]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[16e]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[1e1]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[162]"></a>__hardfp_atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.__hardfp_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sensor
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_element
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcps
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcpm
</UL>

<P><STRONG><a name="[ce]"></a>__hardfp_modf</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, modf.o(i.__hardfp_modf))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __hardfp_modf &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Copy
</UL>

<P><STRONG><a name="[cd]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Copy
</UL>

<P><STRONG><a name="[136]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StandardDeviation
</UL>

<P><STRONG><a name="[16c]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[166]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[165]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[16a]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[167]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[16b]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[163]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[1e2]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1e3]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1e4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[164]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[a1]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[173]"></a>autosend</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sensor_process.o(i.autosend))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = autosend &rArr; check_event_autosend &rArr; uartSendStr &rArr; UartWrite &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_event_autosend
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_task
</UL>

<P><STRONG><a name="[183]"></a>check_data</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, command.o(i.check_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = check_data
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_down
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_datetime
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_date
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cr
</UL>

<P><STRONG><a name="[175]"></a>check_datetime</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, command.o(i.check_datetime))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = check_datetime &rArr; get_softimer_sec &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Erase_Chip
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_softimer_sec
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_time
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_datetime
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_date
</UL>

<P><STRONG><a name="[177]"></a>check_digit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, command.o(i.check_digit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = check_digit
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartcmd_process
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_element
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_windh
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_vv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_version
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_unit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stsensor
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stdev
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_starttime
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_st
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_shsensor
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setcomway
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setcom
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_secdout_on
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_secdout_off
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_restore
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_readdata
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qz
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcps
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcpm
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_id
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ftd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_fat
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_erase_check
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_down
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_debugon
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_debugoff
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cfc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_at
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_asl
</UL>

<P><STRONG><a name="[178]"></a>check_element</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, command.o(i.check_element))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = check_element &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcpm
</UL>

<P><STRONG><a name="[174]"></a>check_event_autosend</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sensor_basic.o(i.check_event_autosend))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = check_event_autosend &rArr; uartSendStr &rArr; UartWrite &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Sec_to_Time
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Time_to_min
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autosend
</UL>

<P><STRONG><a name="[17b]"></a>check_format</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, command.o(i.check_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = check_format &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sensor
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_element
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_time
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcps
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcpm
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_long
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_lat
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_down
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_datetime
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_date
</UL>

<P><STRONG><a name="[17c]"></a>check_sensor</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, command.o(i.check_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = check_sensor &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcps
</UL>

<P><STRONG><a name="[185]"></a>check_time</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, command.o(i.check_time))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_time
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_down
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_datetime
</UL>

<P><STRONG><a name="[17d]"></a>checkuart</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, uartprocess.o(i.checkuart))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = checkuart &rArr; uartdev_process &rArr; uartSendStr &rArr; UartWrite &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartdev_process
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartprocess_task
</UL>

<P><STRONG><a name="[68]"></a>cmd_asl</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, command.o(i.cmd_asl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = cmd_asl &rArr; save_sys_cfg &rArr; W25Q128_Data_Prog &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>cmd_at</STRONG> (Thumb, 360 bytes, Stack size 48 bytes, command.o(i.cmd_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = cmd_at &rArr; save_sys_cfg &rArr; W25Q128_Data_Prog &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>cmd_autocheck</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, command.o(i.cmd_autocheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cmd_autocheck &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>cmd_cfc</STRONG> (Thumb, 430 bytes, Stack size 72 bytes, command.o(i.cmd_cfc))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = cmd_cfc &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>cmd_cr</STRONG> (Thumb, 608 bytes, Stack size 1176 bytes, command.o(i.cmd_cr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = cmd_cr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_data
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_cfg
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_cr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>cmd_date</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, command.o(i.cmd_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = cmd_date &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_format
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_datetime
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_data
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>cmd_datetime</STRONG> (Thumb, 340 bytes, Stack size 88 bytes, command.o(i.cmd_datetime))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = cmd_datetime &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_time
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_format
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_datetime
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_data
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>cmd_debugoff</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, command.o(i.cmd_debugoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cmd_debugoff &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>cmd_debugon</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, command.o(i.cmd_debugon))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cmd_debugon &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>cmd_di</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, command.o(i.cmd_di))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cmd_di &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>cmd_down</STRONG> (Thumb, 670 bytes, Stack size 96 bytes, command.o(i.cmd_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = cmd_down &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_softimer
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_time
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_format
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_data
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>cmd_erase_check</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, command.o(i.cmd_erase_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cmd_erase_check &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Erase_Chip
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>cmd_fat</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, command.o(i.cmd_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = cmd_fat &rArr; save_sys_cfg &rArr; W25Q128_Data_Prog &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>cmd_ftd</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, command.o(i.cmd_ftd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = cmd_ftd &rArr; save_sys_cfg &rArr; W25Q128_Data_Prog &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>cmd_help</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, command.o(i.cmd_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cmd_help &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>cmd_id</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, command.o(i.cmd_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cmd_id &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>cmd_lat</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, command.o(i.cmd_lat))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = cmd_lat &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_format
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>cmd_long</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, command.o(i.cmd_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = cmd_long &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_format
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>cmd_qcpm</STRONG> (Thumb, 796 bytes, Stack size 120 bytes, command.o(i.cmd_qcpm))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = cmd_qcpm &rArr; save_element &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_element
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_format
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_element
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>cmd_qcps</STRONG> (Thumb, 480 bytes, Stack size 88 bytes, command.o(i.cmd_qcps))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = cmd_qcps &rArr; save_sensor &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sensor
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sensor
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_format
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>cmd_qz</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, command.o(i.cmd_qz))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = cmd_qz &rArr; save_sys_cfg &rArr; W25Q128_Data_Prog &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>cmd_readdata</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, command.o(i.cmd_readdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cmd_readdata &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_softimer
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>cmd_reset</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, command.o(i.cmd_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cmd_reset &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>cmd_restore</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, command.o(i.cmd_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = cmd_restore &rArr; save_sys_cfg &rArr; W25Q128_Data_Prog &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_sys_cfg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>cmd_secdout_off</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, command.o(i.cmd_secdout_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cmd_secdout_off &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>cmd_secdout_on</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, command.o(i.cmd_secdout_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cmd_secdout_on &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>cmd_setcom</STRONG> (Thumb, 384 bytes, Stack size 88 bytes, command.o(i.cmd_setcom))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = cmd_setcom &rArr; save_sys_cfg &rArr; W25Q128_Data_Prog &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>cmd_setcomway</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, command.o(i.cmd_setcomway))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = cmd_setcomway &rArr; save_sys_cfg &rArr; W25Q128_Data_Prog &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>cmd_shsensor</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, command.o(i.cmd_shsensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = cmd_shsensor &rArr; save_sys_cfg &rArr; W25Q128_Data_Prog &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>cmd_sn</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, command.o(i.cmd_sn))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cmd_sn &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>cmd_ss</STRONG> (Thumb, 962 bytes, Stack size 176 bytes, command.o(i.cmd_ss))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = cmd_ss &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>cmd_st</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, command.o(i.cmd_st))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = cmd_st &rArr; save_sys_cfg &rArr; W25Q128_Data_Prog &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>cmd_starttime</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, command.o(i.cmd_starttime))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = cmd_starttime &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert_Sec_to_Time
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_softimer
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>cmd_stat</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, command.o(i.cmd_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cmd_stat &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>cmd_stdev</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, command.o(i.cmd_stdev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = cmd_stdev &rArr; save_sys_cfg &rArr; W25Q128_Data_Prog &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>cmd_stsensor</STRONG> (Thumb, 570 bytes, Stack size 40 bytes, command.o(i.cmd_stsensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = cmd_stsensor &rArr; save_sys_cfg &rArr; W25Q128_Data_Prog &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>cmd_superadmin</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, command.o(i.cmd_superadmin))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cmd_superadmin &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>cmd_time</STRONG> (Thumb, 258 bytes, Stack size 64 bytes, command.o(i.cmd_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = cmd_time &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_time
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_format
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_datetime
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>cmd_unit</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, command.o(i.cmd_unit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = cmd_unit &rArr; save_sys_cfg &rArr; W25Q128_Data_Prog &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>cmd_version</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, command.o(i.cmd_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cmd_version &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>cmd_vv</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, command.o(i.cmd_vv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = cmd_vv &rArr; save_sys_cfg &rArr; W25Q128_Data_Prog &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>cmd_windh</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, command.o(i.cmd_windh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = cmd_windh &rArr; save_sys_cfg &rArr; W25Q128_Data_Prog &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_sys_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[18a]"></a>getSeparator</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, command.o(i.getSeparator))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getSeparator
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartcmd_process
</UL>

<P><STRONG><a name="[186]"></a>get_softimer</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, command.o(i.get_softimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_softimer &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_starttime
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_readdata
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_down
</UL>

<P><STRONG><a name="[176]"></a>get_softimer_sec</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, command.o(i.get_softimer_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_softimer_sec &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_datetime
</UL>

<P><STRONG><a name="[18b]"></a>hal_sensor_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wind_hal.o(i.hal_sensor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = hal_sensor_init &rArr; Sensor_Init &rArr; Init_Timer1 &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleData_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[13a]"></a>harddog_feed</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sysinit.o(i.harddog_feed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = harddog_feed
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[18c]"></a>harddog_init</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, sysinit.o(i.harddog_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = harddog_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[4b]"></a>main</STRONG> (Thumb, 248 bytes, Stack size 72 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = main &rArr; sysinit &rArr; sys_cfg_init &rArr; W25Q128_Data_Read &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[18f]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>osSystickHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmsis_os.o(i.osSystickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[18e]"></a>osThreadCreate</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[194]"></a>pam_init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, sysinit.o(i.pam_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pam_init &rArr; W25Q128_Data_Read &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Data_Read
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[1ac]"></a>pvPortMalloc</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[1c5]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1a7]"></a>pxPortInitialiseStack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1af]"></a>read_cfc_data</STRONG> (Thumb, 316 bytes, Stack size 184 bytes, sensor_basic.o(i.read_cfc_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = read_cfc_data &rArr; uartSendStr &rArr; UartWrite &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Data_Read
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdata_task
</UL>

<P><STRONG><a name="[1b0]"></a>read_check_data</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, sensor_basic.o(i.read_check_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = read_check_data &rArr; uartSendStr &rArr; UartWrite &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Data_Read
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdata_task
</UL>

<P><STRONG><a name="[1b1]"></a>read_history_mindata</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, sensor_basic.o(i.read_history_mindata))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = read_history_mindata &rArr; GetMinData &rArr; Data_Copy &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMinData
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_record_min
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdata_task
</UL>

<P><STRONG><a name="[1b2]"></a>read_record_min</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sensor_basic.o(i.read_record_min))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = read_record_min &rArr; W25Q128_Data_Read &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Data_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_history_mindata
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_history_mindata
</UL>

<P><STRONG><a name="[1b3]"></a>read_sys_cfg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysinit.o(i.read_sys_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = read_sys_cfg &rArr; W25Q128_Data_Read &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Data_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_cfg_init
</UL>

<P><STRONG><a name="[8b]"></a>readdata_task</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, sensor_process.o(i.readdata_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = readdata_task &rArr; show_history_mindata &rArr; GetMinData &rArr; Data_Copy &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_history_mindata
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_history_mindata
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_check_data
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cfc_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[184]"></a>save_cr</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, sensor_basic.o(i.save_cr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = save_cr &rArr; W25Q128_Data_Read &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Data_Read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Data_Prog
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cr
</UL>

<P><STRONG><a name="[187]"></a>save_element</STRONG> (Thumb, 1532 bytes, Stack size 64 bytes, command.o(i.save_element))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = save_element &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_format
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcpm
</UL>

<P><STRONG><a name="[188]"></a>save_sensor</STRONG> (Thumb, 800 bytes, Stack size 56 bytes, command.o(i.save_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = save_sensor &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_format
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcps
</UL>

<P><STRONG><a name="[181]"></a>save_sys_cfg</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sysinit.o(i.save_sys_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = save_sys_cfg &rArr; W25Q128_Data_Prog &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Erase_Chip
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Data_Prog
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_windh
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_vv
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_unit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stsensor
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stdev
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_st
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_shsensor
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setcomway
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_setcom
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_restore
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qz
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcps
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_qcpm
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_long
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_lat
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_ftd
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_fat
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_cfc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_at
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_asl
</UL>

<P><STRONG><a name="[1b4]"></a>show_history_mindata</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sensor_basic.o(i.show_history_mindata))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = show_history_mindata &rArr; GetMinData &rArr; Data_Copy &rArr; __hardfp_pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMinData
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_record_min
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdata_task
</UL>

<P><STRONG><a name="[168]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1b5]"></a>startupprint</STRONG> (Thumb, 36 bytes, Stack size 264 bytes, sysinit.o(i.startupprint))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = startupprint &rArr; uartSendStr &rArr; UartWrite &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_task
</UL>

<P><STRONG><a name="[1b6]"></a>sys_cfg_init</STRONG> (Thumb, 98 bytes, Stack size 728 bytes, sysinit.o(i.sys_cfg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = sys_cfg_init &rArr; W25Q128_Data_Read &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Data_Read
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_sys_cfg
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sys_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[18d]"></a>sysinit</STRONG> (Thumb, 262 bytes, Stack size 88 bytes, sysinit.o(i.sysinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = sysinit &rArr; sys_cfg_init &rArr; W25Q128_Data_Read &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalDS3231_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_ReadTime
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartOpen
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sensor_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Self_test
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempdata_init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_cfg_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pam_init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;harddog_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_CFG
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b7]"></a>tempdata_init</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, sysinit.o(i.tempdata_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tempdata_init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysinit
</UL>

<P><STRONG><a name="[8a]"></a>time_task</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, sensor_process.o(i.time_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = time_task &rArr; startupprint &rArr; uartSendStr &rArr; UartWrite &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_ReadTime
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autosend
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendStr
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startupprint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[17a]"></a>uartSendStr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uartprocess.o(i.uartSendStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = uartSendStr &rArr; UartWrite &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_history_mindata
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_history_mindata
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_check_data
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cfc_data
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_event_autosend
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartdev_process
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startupprint
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_task
</UL>

<P><STRONG><a name="[153]"></a>uart_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(i.uart_printf))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Data_Read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Data_Prog
</UL>

<P><STRONG><a name="[1b9]"></a>uart_rcv</STRONG> (Thumb, 138 bytes, Stack size 536 bytes, uartprocess.o(i.uart_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = uart_rcv &rArr; UartRead &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartprocess_task
</UL>

<P><STRONG><a name="[1ba]"></a>uartcmd_process</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, command.o(i.uartcmd_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = uartcmd_process &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSeparator
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_digit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils_CheckCmdStr
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartdev_process
</UL>

<P><STRONG><a name="[17e]"></a>uartdev_process</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uartprocess.o(i.uartdev_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = uartdev_process &rArr; uartSendStr &rArr; UartWrite &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartcmd_process
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkuart
</UL>

<P><STRONG><a name="[89]"></a>uartprocess_task</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sensor_process.o(i.uartprocess_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + In Cycle
<LI>Call Chain = uartprocess_task &rArr;  uartprocess_task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rcv
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkuart
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartprocess_task
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartprocess_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[196]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[19b]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[1a6]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[198]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[197]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[19a]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[19c]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1a4]"></a>vPortFree</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[1c0]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1bb]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>

<P><STRONG><a name="[14d]"></a>vTaskDelay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Reset
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Data_Read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_Data_Prog
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend_2
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend_1
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRecv_2
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRecv_1
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartprocess_task
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_task
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdata_task
</UL>

<P><STRONG><a name="[1ab]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1bd]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1be]"></a>vTaskPriorityInherit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1c6]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[190]"></a>vTaskStartScheduler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[19e]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[8e]"></a>vTaskSwitchContext</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1bf]"></a>xPortStartScheduler</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[192]"></a>xPortSysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[148]"></a>xQueueGenericCreate</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartOpen
</UL>

<P><STRONG><a name="[14c]"></a>xQueueGenericReceive</STRONG> (Thumb, 360 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend_2
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend_1
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRecv_2
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRecv_1
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
</UL>

<P><STRONG><a name="[1c4]"></a>xQueueGenericReset</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[14a]"></a>xQueueGenericSend</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartWrite
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend_2
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSend_1
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRecv_2
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRecv_1
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRead
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartOpen
</UL>

<P><STRONG><a name="[121]"></a>xQueueGiveFromISR</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMA_Restart
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[1c7]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[149]"></a>xTaskCreate</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartOpen
</UL>

<P><STRONG><a name="[191]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1c3]"></a>xTaskIncrementTick</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1a3]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[1aa]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[19f]"></a>xTaskResumeAll</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1ad]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1ae]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[5d]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[1a1]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1a2]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1a8]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1a9]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[195]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[199]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[19d]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[1a0]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[5e]"></a>prvIdleTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1a5]"></a>prvInitialiseNewTask</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1c8]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[193]"></a>makeFreeRtosPriority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[131]"></a>SPIx_MspInit</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, spi.o(i.SPIx_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPIx_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIInit
</UL>

<P><STRONG><a name="[cb]"></a>bcd_trans_char</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ds3231.o(i.bcd_trans_char))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_ReadTime
</UL>

<P><STRONG><a name="[f9]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[e6]"></a>DMA_SetConfig</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32l4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[128]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l4xx_hal_i2c.o(i.I2C_Flush_TXDR))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[127]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32l4xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[ef]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, stm32l4xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[f0]"></a>I2C_TransferConfig</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[ee]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[f1]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[129]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32l4xx_hal_i2c.o(i.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[109]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[107]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[108]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[52]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = UART_DMAAbortOnError &rArr; HAL_UART_ErrorCallback &rArr; USART_DMA_Restart &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[55]"></a>UART_DMAError</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UART_DMAError &rArr; HAL_UART_ErrorCallback &rArr; USART_DMA_Restart &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
<LI> stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[53]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = UART_DMAReceiveCplt &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[54]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMARxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[56]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_DMATransmitCplt &rArr; HAL_UART_TxCpltCallback &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[57]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[115]"></a>UART_EndRxTransfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[140]"></a>UART_EndTxTransfer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[fe]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[fa]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[16f]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[161]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[171]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[170]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[9c]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[50]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
